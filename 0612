import os
import csv
import re
from collections import defaultdict
from git import Repo
import mimetypes

# === 配置路径 ===
REPO_PATH = '/你的/仓库/路径'  # ← 修改为你的 Git 仓库路径
TODO_CSV = 'todo_details.csv'
SUMMARY_CSV = 'todo_summary.csv'

TODO_PATTERN = re.compile(r'\bTODO\b[:\- ]?(.*)', re.IGNORECASE)

def is_text_file(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    return mime_type and (mime_type.startswith('text') or 'json' in mime_type or 'xml' in mime_type)

def extract_todos(content):
    result = []
    for i, line in enumerate(content.splitlines(), 1):
        if 'TODO' in line:
            match = TODO_PATTERN.search(line)
            if match:
                result.append((i, line.strip(), match.group(1).strip()))
    return result

def analyze_todos_by_file(repo_path, detail_csv, summary_csv):
    repo = Repo(repo_path)
    tracked_files = repo.git.ls_tree('-r', '--name-only', 'HEAD').splitlines()

    todo_rows = []
    summary = defaultdict(lambda: defaultdict(int))  # file -> commit -> count

    for rel_path in tracked_files:
        if not is_text_file(rel_path):
            continue
        print(f'📄 正在处理文件: {rel_path}')
        commits = list(repo.iter_commits(paths=rel_path))

        for commit in reversed(commits):  # 从旧到新
            try:
                blob = commit.tree / rel_path
                content = blob.data_stream.read().decode('utf-8', errors='ignore')
                todos = extract_todos(content)

                summary[rel_path][commit.hexsha] = len(todos)

                for line_num, full_line, extracted in todos:
                    todo_rows.append([
                        rel_path,
                        commit.hexsha,
                        commit.committed_datetime.isoformat(),
                        commit.author.name,
                        line_num,
                        full_line,
                        extracted
                    ])
            except Exception as e:
                print(f"⚠️ 跳过 {rel_path} @ {commit.hexsha[:7]}: {e}")
                continue

    # 写详细 TODO CSV
    with open(detail_csv, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['File Path', 'Commit Hash', 'Commit Date', 'Author', 'Line Number', 'Full Line', 'TODO Text'])
        writer.writerows(todo_rows)
    print(f"✅ 已写入详细 TODO: {detail_csv}")

    # 写 TODO 数量摘要
    with open(summary_csv, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['File Path', 'Commit Hash', 'TODO Count'])
        for file_path, commits in summary.items():
            for commit_hash, count in commits.items():
                writer.writerow([file_path, commit_hash, count])
    print(f"📊 已写入每版本 TODO 数量: {summary_csv}")

# 调用主函数
analyze_todos_by_file(REPO_PATH, TODO_CSV, SUMMARY_CSV)





import os
import re
import csv
import mimetypes
from git import Repo

# === 配置路径 ===
REPO_PATH = '/your/project/path'  # ← 替换为你的 Git 工程目录
OUTPUT_CSV = './todo_detailed_by_commit.csv'

# 正则匹配 TODO（支持 TODO: 或 TODO - 或 TODO 后空格）
TODO_PATTERN = re.compile(r'(?i)\bTODO\b[:\- ]?(.*)')

# 判断文件是否为文本文件
def is_text_file(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    return mime_type and mime_type.startswith('text')

# 提取 TODO（返回整行 & 提取内容）
def extract_todos_from_file(file_path):
    todos = []
    if not os.path.isfile(file_path) or not is_text_file(file_path):
        return todos
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for i, line in enumerate(f, 1):
                if 'TODO' in line:
                    match = TODO_PATTERN.search(line)
                    if match:
                        todos.append((i, line.strip(), match.group(1).strip()))
    except Exception as e:
        print(f"[读取失败] {file_path} - {e}")
    return todos

# 遍历项目所有文件
def extract_all_todos(root_dir):
    todos = []
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            rel_path = os.path.relpath(file_path, root_dir)
            file_todos = extract_todos_from_file(file_path)
            for line_num, full_line, extracted in file_todos:
                todos.append((rel_path, line_num, full_line, extracted))
    return todos

# 主函数：收集所有提交版本中的 TODO 并输出 CSV
def collect_todos_detailed(repo_path, output_csv):
    repo = Repo(repo_path)
    commits = list(repo.iter_commits())
    original_branch = repo.active_branch.name

    with open(output_csv, 'w', encoding='utf-8', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow([
            'Commit Hash', 'Commit Date', 'Commit Author', 'Commit Message',
            'File Path', 'Line Number', 'TODO Full Line', 'TODO Extracted'
        ])

        for commit in reversed(commits):  # 从旧到新
            print(f"🔍 正在处理提交 {commit.hexsha[:7]} - {commit.summary}")
            repo.git.checkout(commit.hexsha)

            todos = extract_all_todos(repo_path)
            for file_path, line_num, full_line, extracted in todos:
                writer.writerow([
                    commit.hexsha,
                    commit.committed_datetime.isoformat(),
                    commit.author.name,
                    commit.message.strip(),
                    file_path,
                    line_num,
                    full_line,
                    extracted
                ])

    repo.git.checkout(original_branch)
    print(f"\n✅ 已完成：TODO 结果已保存至 {output_csv}")

# 执行脚本
if __name__ == '__main__':
    collect_todos_detailed(REPO_PATH, OUTPUT_CSV)



import os
import re
import csv
from git import Repo

# 配置项
REPO_PATH = '/your/java/project/path'  # 替换为你的 Java 项目路径
OUTPUT_CSV = './todo_by_commit.csv'
TODO_PATTERN = re.compile(r'(?i)\bTODO\b[:\- ]?(.*)')  # 匹配 TODO 行

def extract_todos_from_file(file_path):
    todos = []
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for i, line in enumerate(f, 1):
                if 'TODO' in line:
                    match = TODO_PATTERN.search(line)
                    if match:
                        todos.append((i, match.group(0).strip()))
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
    return todos

def extract_all_todos(root_dir):
    todos = []
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            if filename.endswith('.java'):
                file_path = os.path.join(dirpath, filename)
                file_todos = extract_todos_from_file(file_path)
                rel_path = os.path.relpath(file_path, root_dir)
                for line_num, text in file_todos:
                    todos.append((rel_path, line_num, text))
    return todos

def collect_todos_to_csv(repo_path, output_csv):
    repo = Repo(repo_path)
    commits = list(repo.iter_commits())
    original_branch = repo.active_branch.name

    with open(output_csv, 'w', encoding='utf-8', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Commit Hash', 'Commit Date', 'Commit Message', 'File Path', 'Line Number', 'TODO Text'])

        for commit in reversed(commits):  # 从旧到新
            print(f"Checking commit {commit.hexsha[:7]} - {commit.summary}")
            repo.git.checkout(commit.hexsha)

            todos = extract_all_todos(repo_path)
            for file_path, line_num, text in todos:
                writer.writerow([
                    commit.hexsha,
                    commit.committed_datetime.isoformat(),
                    commit.message.strip(),
                    file_path,
                    line_num,
                    text
                ])

    # 回到原分支
    repo.git.checkout(original_branch)
    print(f"\nCSV 完成输出：{output_csv}")

# 主入口
if __name__ == '__main__':
    collect_todos_to_csv(REPO_PATH, OUTPUT_CSV)
