import os
import javalang

PATH_NAME = 'cis'
BASE_FOLDER = 'E:\\BIP\\1基線庫\\03source\\00.受領資料\\受領ソース\\商品\\' + PATH_NAME
JAVA_PATH_NAME = 'java_' + PATH_NAME + '.txt'
JAVA_SOURCE_NAME = 'java_source_' + PATH_NAME + '.txt'
JAVA_PATH_ACTION_NAME = 'java_action_' + PATH_NAME + '.txt'
CURRENT_ROW = 1
CURRENT_COL = 1
CODE_LINE_NO = 0
LOG_FILE_PATH = 'class_file.log'
WRITE_COUNT = 0
FOLDS = False
ARCHIVE_FILE_PATH = ''
OUTPUT_TXT = 'G:\\' + PATH_NAME + '_output.txt'
OUTPUT_CONTEXT = []
OUTPUT_LINE = []
METHOD_CALL = []
METHOD_COUNT = 0


def find_java_files(folder_path_to_find, word):
    java_files = []
    for root, dirs, files in os.walk(folder_path_to_find):
        for file_con in files:
            if file_con.endswith(word + '.java'):
                java_files.append(os.path.join(root, file_con))
    return java_files


def base_file_create():
    # フォールだにはJavaファイルすべてを取得する
    java_files_path = find_java_files(BASE_FOLDER, '')
    # PATHをtxtに書く
    with open(JAVA_PATH_NAME, 'w') as output_file:
        for java_files_for_write in java_files_path:
            output_file.write(java_files_for_write + "\n")
    # JAVA名をtxtに書く
    with open(JAVA_PATH_NAME, 'r') as file:
        with open(JAVA_SOURCE_NAME, 'w') as output_file:
            for line in file:
                output_file.write(line.split('\\')[len(line.split('\\')) - 1])


def base_file_action_create():
    action_files_path = find_java_files(BASE_FOLDER, 'Action')
    # PATHをtxtに書く
    with open(JAVA_PATH_ACTION_NAME, 'w') as output_file:
        for java_files_for_write in action_files_path:
            output_file.write(java_files_for_write + "\n")


def base_file_to_find_in(word):
    with open(JAVA_SOURCE_NAME, 'r') as file_to_find:
        for line in file_to_find:
            line = line.replace('\n', '')
            if line == word + ".java":
                return True
    return False


# # BASEファイルを作成
# base_file_create()
# # Actionファイルを作成
# base_file_action_create()


def find_specific_line_from_txt(txt_path, word, offset, code_line_no):
    line_no = 0
    if offset == '':
        with open(txt_path, 'r', encoding="utf-8") as txt_context:
            for specific_context in txt_context:
                line_no += 1
                if specific_context.find("import") >= 0 or specific_context.find(".") >= 0:
                    continue
                if specific_context.find(word) > 0:
                    if code_line_no > line_no:
                        return specific_context
                    elif code_line_no <= line_no:
                        print('code_line_no <= line_no')
    else:
        count_for_pix = 0
        with open(txt_path, 'r', encoding="utf-8") as txt_context:
            for specific_context in txt_context:
                count_for_pix += 1
                if count_for_pix == code_line_no + offset:
                    return specific_context
    return None


# output txt
def write_output(context):
    with open(OUTPUT_TXT, 'a') as output_file:
        output_file.write(context + "\n")


def parse_package(tree):
    package_name = tree.package.name if tree.package else None
    # print("Package Name:", package_name)


def parse_imports(tree):
    import_statements = [imp.path for imp in tree.imports]
    # print("Import Statements:", import_statements)


def parse_classes(tree):
    for class_def in tree.types:
        print("\nClass Name:", class_def.name)
        OUTPUT_LINE.append(class_def.name)
        # Fields
        # for field in class_def.fields:
        # print("Field:", field.type, field.declarators[0].name)

        # Methods
        for method in class_def.methods:
            print("\nMethod Name:", method.name)
            # OUTPUT_LINE.append(method.name)
            # print("Parameters:", [(param.type, param.name) for param in method.parameters])

            # Exception Handling
            # if method.throws:
            #     print("Throws:", [exception for exception in method.throws])

            # Method Body
            if method.body:
                parse_method_body(method.body)


def parse_method_body(body):
    global METHOD_CALL, METHOD_COUNT
    METHOD_COUNT = 0
    for statement in body:
        if isinstance(statement, javalang.tree.StatementExpression) \
                and isinstance(statement.expression, javalang.tree.MethodInvocation):

            key_line = find_specific_line_from_txt(java_action_path, statement.expression.qualifier,
                                                   '', statement.expression.position.line)
            if key_line is None:
                continue
            if key_line.find('new') > 0:
                # GK010101_SearchTodoServiceBean searchTodoServiceBean
                # = new GK010101_SearchTodoServiceBean();
                key_to_find_in_base = key_line.split(' ')[len(key_line.split(' ')) - 5]
            else:
                # private GK010101_SearchTodoBean gk010101SearchTodoBean;
                key_to_find_in_base = key_line.split(" ")[len(key_line.split(" ")) - 2]
            if key_to_find_in_base.find('Bean') > 0 or key_to_find_in_base.find('Object') > 0 \
                    or key_to_find_in_base.find('Mapper') > 0:
                continue
            if base_file_to_find_in(key_to_find_in_base) is True:
                print("\nMethod Call:", statement.expression.member)
                print("Method Call qualifier:", statement.expression.qualifier)
                print("Method Call LineNo.:", statement.expression.position.line)
                METHOD_CALL = []
                METHOD_CALL = [statement.expression.member, statement.expression.qualifier,
                               statement.expression.position.line]
                print('wyswys [ ', key_to_find_in_base, ' ] wyswys [ ', statement.expression.member, ' ]')
                find_method_after_action(key_to_find_in_base, statement.expression.member)
                OUTPUT_LINE.append(METHOD_CALL)
                METHOD_COUNT += 1


LAY_NO = 1


def find_method_after_action(class_to_find, method_to_find):
    class_path = find_java_files(BASE_FOLDER, class_to_find)
    if len(class_path) > 0:
        with open(class_path[0], 'r', encoding="utf-8") as class_file:
            class_code = class_file.read()
            tree_tmp = javalang.parse.parse(class_code)
            for class_def_tmp in tree_tmp.types:
                for method_tmp in class_def_tmp.methods:
                    if method_tmp.name == method_to_find:
                        # Method Body
                        if method_tmp.body:
                            print("\nfind_method_after_action Method Name:", method_tmp.name)
                            parse_method_body_after_action(method_tmp.body, class_path[0])
                            if METHOD_COUNT > 0:
                                print('wyswys [ ', class_to_find, ' ] wyswys [ ', method_to_find, ' ]')
                                find_method_after_action(class_to_find, method_to_find)
                            else:
                                continue
                        elif method_tmp.body is None:
                            print('wyswys [ ', class_to_find + "Impl", ' ] wyswys [ ', method_to_find, ' ]')
                            find_method_after_action(class_to_find + "Impl", method_to_find)


def parse_method_body_after_action(body, class_path):
    global METHOD_CALL, METHOD_COUNT
    METHOD_COUNT = 0
    for statement in body:
        if isinstance(statement, javalang.tree.StatementExpression) \
                and isinstance(statement.expression, javalang.tree.MethodInvocation):

            key_line = find_specific_line_from_txt(class_path, statement.expression.qualifier,
                                                   '', statement.expression.position.line)
            if key_line is None:
                continue
            if key_line.find('new') > 0:
                # GK010101_SearchTodoServiceBean searchTodoServiceBean
                # = new GK010101_SearchTodoServiceBean();
                key_to_find_in_base = key_line.split(' ')[len(key_line.split(' ')) - 5]
            else:
                # private GK010101_SearchTodoBean gk010101SearchTodoBean;
                key_to_find_in_base = key_line.split(" ")[len(key_line.split(" ")) - 2]
            if key_to_find_in_base.find('Bean') > 0 or key_to_find_in_base.find('Object') > 0 \
                    or key_to_find_in_base.find('Mapper') > 0:
                continue
            if base_file_to_find_in(key_to_find_in_base) is True:
                print("\nparse_method_body_after_action Method Call:", statement.expression.member)
                print("parse_method_body_after_action Method Call qualifier:", statement.expression.qualifier)
                print("parse_method_body_after_action Method Call LineNo.:", statement.expression.position.line)
                METHOD_CALL_NEW = []
                METHOD_CALL_NEW = [statement.expression.member, statement.expression.qualifier,
                                   statement.expression.position.line]
                print('wyswys [ ', key_to_find_in_base, ' ] wyswys [ ', statement.expression.member, ' ]')
                find_method_after_action(key_to_find_in_base, statement.expression.member)
                OUTPUT_LINE.append(METHOD_CALL)
                METHOD_COUNT += 1


def parse_java_file(java_code):
    tree = javalang.parse.parse(java_code)
    parse_package(tree)
    parse_imports(tree)
    parse_classes(tree)


with open(JAVA_PATH_ACTION_NAME, 'r') as file:
    for java_action_path in file:
        java_action_path = java_action_path.replace('\n', '')
        if java_action_path:
            OUTPUT_LINE = []
            print('java-path : [' + java_action_path + '] is reading...')
            with open(java_action_path, 'r', encoding="utf-8") as java_file:
                java_code = java_file.read()
                parse_java_file(java_code)

            write_output(str(OUTPUT_LINE))
